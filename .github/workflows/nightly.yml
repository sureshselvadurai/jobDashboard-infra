name: Nightly Deployment

on:
  schedule:
    - cron: "0 3 * * *"  # Runs nightly at 3 AM UTC
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout Infra Repository
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

#      - name: Launch Temporary EC2 Instance for Testing
#        run: |
#          echo "Launching temporary EC2 instance..."
#
#          INSTANCE_DETAILS=$(aws ec2 run-instances \
#            --image-id ami-05b10e08d247fb927 \
#            --instance-type t2.medium \
#            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Temp-EC2-Test}]' \
#            --key-name j_ \
#            --security-group-ids sg-050ccad9abad062ad \
#            --query 'Instances[0].[InstanceId,PublicIpAddress]' \
#            --output text)
#
#          INSTANCE_ID=$(echo "$INSTANCE_DETAILS" | awk '{print $1}')
#          PUBLIC_IP=$(echo "$INSTANCE_DETAILS" | awk '{print $2}')
#
#          echo "Instance ID: $INSTANCE_ID"
#          echo "Public IP: $PUBLIC_IP"
#
#          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
#          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
#
#          echo "Waiting for EC2 to be in 'running' state..."
#          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
#
#          echo "EC2 Instance is now running."
#
#
#
#      - name: Get EC2 Public IP
#        run: |
#          echo "Fetching EC2 Public IP..."
#          PUBLIC_IP=$(aws ec2 describe-instances \
#            --instance-ids $INSTANCE_ID \
#            --query 'Reservations[0].Instances[0].PublicIpAddress' \
#            --output text)
#
#          if [[ -z "$PUBLIC_IP" || "$PUBLIC_IP" == "None" ]]; then
#            echo "Error: Could not fetch EC2 Public IP. Exiting."
#            exit 1
#          fi
#
#          echo "EC2 Public IP: $PUBLIC_IP"
#          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
#
#      - name: Verify Public IP is Set
#        run: |
#          echo "Using EC2 Public IP: $PUBLIC_IP"


      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key_1.pem
          chmod 600 private_key_1.pem

#      - name: Wait for EC2 SSH to be available
#        run: |
#          echo "Waiting for SSH to be available on EC2..."
#          for i in {1..10}; do
#            nc -z -v -w5 $PUBLIC_IP 22 && break
#            echo "Retrying in 10 seconds..."
#            sleep 10
#          done
#          echo "EC2 SSH is now available!"
#
#      - name: SSH into EC2 and Deploy
#        run: |
#          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$PUBLIC_IP << 'EOF'
#            echo "Updating packages and installing dependencies..."
#            sudo yum update -q -y
#            sudo yum install -q -y git docker
#
#            echo "Starting Docker service..."
#            sudo systemctl start docker
#            sudo systemctl enable docker
#            sudo usermod -aG docker ec2-user
#            newgrp docker
#
#            echo "Installing Docker Compose..."
#            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#            sudo chmod +x /usr/local/bin/docker-compose
#            docker-compose --version
#
#            echo "Cloning or updating repository..."
#            if [ -d "jobDashboard" ]; then
#              cd jobDashboard && git pull
#            else
#              git clone https://github.com/sureshselvadurai/jobDashboard.git && cd jobDashboard
#            fi
#
#            echo "Starting application with Docker Compose..."
#            docker-compose down
#            docker-compose pull
#            docker-compose up -d --build
#          EOF
#
#
#      - name: Wait for Backend Server to be Ready
#        run: |
#          echo "Waiting for backend service to be available..."
#          for i in {1..10}; do
#            curl -f http://$PUBLIC_IP:8000/jobs && break
#            echo "Backend is not up yet. Retrying in 10 seconds..."
#            sleep 10
#          done || { echo "Backend failed to start in time"; exit 1; }
#
#      - name: Terminate Temporary EC2 Instance
#        run: |
#          aws ec2 terminate-instances --instance-ids $INSTANCE_ID

      - name: Authenticate to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Images to ECR
        run: |
          set -e  # Exit on error for better debugging

          BACKEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BACKEND_REPOSITORY }}:latest"
          FRONTEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_FRONTEND_REPOSITORY }}:latest"

          echo "üîç Cloning the repository..."
          git clone --depth 1 https://github.com/sureshselvadurai/jobDashboard.git
          
          cd jobDashboard

          echo "üîç Checking backend directory..."
          if [ ! -d "backend" ]; then
            echo "‚ùå Backend directory not found!"
            exit 1
          fi

          echo "üîç Checking backend Dockerfile..."
          if [ ! -f "backend/Dockerfile" ]; then
            echo "‚ùå Backend Dockerfile not found!"
            exit 1
          fi

          echo "üöÄ Building all services using Docker Compose..."
          docker compose build --progress=plain  # Show detailed build logs

          echo "üê≥ Available Docker images:"
          docker images
          
          echo "üîç Verifying backend image build..."
          BACKEND_IMAGE_ID=$(docker images -q jobdashboard-backend)
          if [ -z "$BACKEND_IMAGE_ID" ]; then
            echo "‚ùå Backend image failed to build!"
            exit 1
          fi
          echo "‚úÖ Backend image built successfully: $BACKEND_IMAGE_ID"

          echo "üîç Verifying frontend image build..."
          FRONTEND_IMAGE_ID=$(docker images -q jobdashboard-frontend)
          if [ -z "$FRONTEND_IMAGE_ID" ]; then
            echo "‚ùå Frontend image failed to build!"
            exit 1
          fi
          echo "‚úÖ Frontend image built successfully: $FRONTEND_IMAGE_ID"

          echo "üöÄ Tagging and pushing backend image..."
          docker tag jobdashboard-backend $BACKEND_IMAGE_URI
          docker push $BACKEND_IMAGE_URI
          echo "‚úÖ Backend image pushed to ECR: $BACKEND_IMAGE_URI"
          
          echo "üöÄ Tagging and pushing frontend image..."
          docker tag jobdashboard-frontend $FRONTEND_IMAGE_URI
          docker push $FRONTEND_IMAGE_URI
          echo "‚úÖ Frontend image pushed to ECR: $FRONTEND_IMAGE_URI"


      - name: Set Environment Variables
        run: |
          echo "üîç Fetching EC2 Host for instance 'j_server'..."
          
          # Fetch the instance's Public IP using AWS CLI
          EC2_HOST=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=j_server" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)

          # Check if EC2_HOST is found
          if [[ -z "$EC2_HOST" ]]; then
            echo "‚ùå No running instance found with the name 'j_server'!"
            exit 1
          fi

          echo "‚úÖ EC2 Host found: $EC2_HOST"

          # Set environment variables for later steps
          echo "EC2_USER=${{ secrets.EC2_USER }}" >> $GITHUB_ENV
          echo "EC2_HOST=$EC2_HOST" >> $GITHUB_ENV

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key1.pem
          chmod 600 private_key1.pem

      - name: Deploy Backend and Frontend to QA EC2
        run: |
          echo "Using the following connection details:"
          echo "EC2 User: $EC2_USER"
          echo "EC2 Host: $EC2_HOST"
      
          # Debugging: Print image URIs before SSH
          echo "üîç Resolving Image URIs..."

          if [[ -z "$BACKEND_IMAGE_URI" || -z "$FRONTEND_IMAGE_URI" ]]; then
            echo "‚ùå Image URIs are not set. Check GitHub secrets."
            exit 1
          fi
      
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$EC2_HOST << EOF
            echo "‚úÖ Connected successfully!"
            echo "üìÇ Navigating to deployment directory..."
            cd /home/ec2-user/job_dashboard_deploy
      
            echo "üì• Logging into AWS ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            echo "üîç Backend Image URI: $BACKEND_IMAGE_URI"
            echo "üîç Frontend Image URI: $FRONTEND_IMAGE_URI"
          
            BACKEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BACKEND_REPOSITORY }}:latest"
            FRONTEND_IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_FRONTEND_REPOSITORY }}:latest"
      
            echo "üîç Backend Image URI: $BACKEND_IMAGE_URI"
            echo "üîç Frontend Image URI: $FRONTEND_IMAGE_URI"
      
            echo "üì• Pulling the latest images..."
            docker pull "$BACKEND_IMAGE_URI"
            docker pull "$FRONTEND_IMAGE_URI"
          
            echo "üöÄ Running backend container..."
            docker run -d --name "$BACKEND_IMAGE_URI" -p 8000:8000 "$BACKEND_IMAGE_URI"
          
            echo "üöÄ Running frontend container..."
            docker run -d --name "$FRONTEND_IMAGE_URI" -p 5500:5500 "$FRONTEND_IMAGE_URI"
          
            echo "üéâ Deployment successful!"
          EOF
        env:
          EC2_USER: "${{ secrets.EC2_USER }}"
          EC2_HOST: "${{ secrets.EC2_HOST }}"
          BACKEND_IMAGE_URI: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_BACKEND_REPOSITORY }}:latest"
          FRONTEND_IMAGE_URI: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_FRONTEND_REPOSITORY }}:latest"



      - name: Verify Deployment
        run: |
          echo "üîç Verifying Backend API is responding..."
          for i in {1..10}; do
            curl -f http://$EC2_HOST:8000/jobs && break
            echo "Backend is not up yet. Retrying in 10 seconds..."
            sleep 10
          done || { echo "‚ùå Backend failed to start in time"; exit 1; }

          echo "‚úÖ Backend is up!"

          echo "üîç Verifying Frontend is accessible..."
          for i in {1..10}; do
            curl -f http://$EC2_HOST:5500 && break
            echo "Frontend is not up yet. Retrying in 10 seconds..."
            sleep 10
          done || { echo "‚ùå Frontend failed to start in time"; exit 1; }

          echo "‚úÖ Frontend is up!"