name: Nightly Deployment

on:
  schedule:
    - cron: "0 3 * * *"  # Runs nightly at 3 AM UTC
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout Infra Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch Temporary EC2 Instance for Testing
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927 \
            --instance-type t3.micro \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "EC2 instance launched: $INSTANCE_ID"
          
          # Wait for EC2 to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          echo "EC2 instance is now running."


      - name: Get EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Set Up SSH Access to EC2
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Clone Code Repository & Run App on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@$PUBLIC_IP << 'EOF'
            echo "Cloning repository..."
            git clone https://github.com/sureshselvadurai/jobDashboard.git
            cd jobDashboard
            echo "Starting application..."
            docker-compose up -d
          EOF

      - name: Wait for Backend Server to be Ready
        run: |
          echo "Waiting for backend service to be available..."
          for i in {1..10}; do
            curl -f http://$PUBLIC_IP:8000/health && break
            echo "Backend is not up yet. Retrying in 10 seconds..."
            sleep 10
          done || { echo "Backend failed to start in time"; exit 1; }

      - name: Terminate Temporary EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID

      - name: Authenticate to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image to ECR
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest"
          docker build -t job_backend https://github.com/sureshselvadurai/jobDashboard.git#main:backend
          docker tag job_backend $IMAGE_URI
          docker push $IMAGE_URI

      - name: Deploy Backend to QA EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Pulling latest backend image..."
            
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

            echo "Stopping old backend container..."
            docker stop job_backend || true
            docker rm job_backend || true

            echo "Starting new backend container..."
            docker run -d --name job_backend \
              -p 8000:8000 \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          EOF
