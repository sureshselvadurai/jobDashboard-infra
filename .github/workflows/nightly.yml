name: Nightly Deployment

on:
  schedule:
    - cron: "0 3 * * *"  # Runs nightly at 3 AM UTC
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout Infra Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch Temporary EC2 Instance for Testing
        run: |
          echo "Launching temporary EC2 instance..."
          
          INSTANCE_DETAILS=$(aws ec2 run-instances \
            --image-id ami-05b10e08d247fb927 \
            --instance-type t3.micro \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Temp-EC2-Test}]' \
            --key-name j_ \
            --security-group-ids sg-050ccad9abad062ad \
            --query 'Instances[0].[InstanceId,PublicIpAddress]' \
            --output text)

          INSTANCE_ID=$(echo "$INSTANCE_DETAILS" | awk '{print $1}')
          PUBLIC_IP=$(echo "$INSTANCE_DETAILS" | awk '{print $2}')

          echo "Instance ID: $INSTANCE_ID"
          echo "Public IP: $PUBLIC_IP"

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

          echo "Waiting for EC2 to be in 'running' state..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          echo "EC2 Instance is now running."



      - name: Get EC2 Public IP
        run: |
          echo "Fetching EC2 Public IP..."
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [[ -z "$PUBLIC_IP" || "$PUBLIC_IP" == "None" ]]; then
            echo "Error: Could not fetch EC2 Public IP. Exiting."
            exit 1
          fi
          
          echo "EC2 Public IP: $PUBLIC_IP"
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Verify Public IP is Set
        run: |
          echo "Using EC2 Public IP: @$PUBLIC_IP"

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Wait for EC2 SSH to be available
        run: |
          echo "Waiting for SSH to be available on EC2..."
          for i in {1..10}; do
            nc -z -v -w5 $PUBLIC_IP 22 && break
            echo "Retrying in 10 seconds..."
            sleep 10
          done
          echo "EC2 SSH is now available!"

      - name: SSH into EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@$PUBLIC_IP << 'EOF'
            echo "Updating packages and installing dependencies..."
            sudo yum update -y
            sudo yum install -y git docker
      
            echo "Starting Docker service..."
            sudo systemctl start docker
            sudo systemctl enable docker
      
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      
            echo "Cloning repository..."
            git clone https://github.com/sureshselvadurai/jobDashboard.git || (cd jobDashboard && git pull)
            cd jobDashboard
      
            echo "Starting application..."
            sudo docker-compose up -d
          EOF



      - name: Wait for Backend Server to be Ready
        run: |
          echo "Waiting for backend service to be available..."
          for i in {1..10}; do
            curl -f http://$PUBLIC_IP:8000/health && break
            echo "Backend is not up yet. Retrying in 10 seconds..."
            sleep 10
          done || { echo "Backend failed to start in time"; exit 1; }

      - name: Terminate Temporary EC2 Instance
        run: |
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID

      - name: Authenticate to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Image to ECR
        run: |
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest"
          docker build -t job_backend https://github.com/sureshselvadurai/jobDashboard.git#main:backend
          docker tag job_backend $IMAGE_URI
          docker push $IMAGE_URI

      - name: Deploy Backend to QA EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Pulling latest backend image..."
            
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

            echo "Stopping old backend container..."
            docker stop job_backend || true
            docker rm job_backend || true

            echo "Starting new backend container..."
            docker run -d --name job_backend \
              -p 8000:8000 \
              -e DB_USER=${{ secrets.DB_USER }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
          EOF
